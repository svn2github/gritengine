-- (c) Augusto Moura 2014, Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php

GritLevel = {}
function GritLevel.new()
	local self = {
		name = "Level_"..math.random();
		description= "";		
		game_mode = default_game_mode;
		objects = {};
		file_name = "";
		env_cube = "";
		cam_pos = {};
		cam_dir= {};
		cam_Pitch = {};
		cam_Yaw = {};
		graphs = {};
		spawn_pos = {};
	}
	self.graphs.var = {}
	self.graphs.nodes = {}
	make_instance(self, GritLevel)
	return self
end;

function GritLevel:open(levelfile)
	--object_all_del()

	-- you can just create a new level and include a lua that cointains object placements
	if levelfile:reverse():match("..."):reverse() == "lua" then
		print(levelfile)
		include ("/"..levelfile)
		self.objects = object_all()
		self.spawn_pos = vector3(0, 0, 0)
		return
	elseif levelfile:reverse():match("..."):reverse() == "lvl" then
		object_all_del()
		include ("/"..levelfile)
		if level == nil then
			error("This file is not a Grit Level File")
			return
		end
		
		self.name = level.name
		self.description = level.description
		self.game_mode = level.game_mode
		self.env_cube = level.env_cube
		self.file_name = levelfile
		
		local loadmap = loadstring(level.map)
		loadmap()
		self.objects = object_all()
		self.spawn_pos = level.spawn_pos or vector3(0, 0, 0)
		self:set_camera()
	else
		error("File name cannot be handled!")
		return false
	end
end

function GritLevel:set_camera()
	self.cam_pos = level.cam_pos or vector3(0, 0, 0)
	self.cam_Yaw = level.cam_Yaw or 0
	self.cam_Pitch = level.cam_Pitch or 0
	self.cam_dir = level.cam_dir or quat(1, 0, 0, 0)
	
	player_ctrl.camPos = self.cam_pos 
	player_ctrl.camYaw = self.cam_Yaw 
	player_ctrl.camPitch = self.cam_Pitch
	player_ctrl.camDir = self.cam_dir
end

function GritLevel:load_game_mode(gamemode)
	gamemode = gamemode or self.game_mode
	safe_include ("/"..editor.directory.."/"..game_mode_dir.."/"..self.game_mode..".lua")
end

function GritLevel:save()
	local file = io.open(self.file_name, "w")
	print(self.file_name)
	if file == nil then error("Could not open file", 1) end
	
	-- maybe will be removed, but for now save all objects
	self.objects = object_all()
	
	file:write(
[[
-- Lua file generated by Grit Editor.
-- WARNING: If you modify this file, your changes will be lost if it is subsequently re-saved from editor

-------------------- Common Definitions --------------------
level = {}
level.name = ']]..self.name..
"'\nlevel.description = '"..self.description..
"'\nlevel.game_mode = '"..self.game_mode..
"'\nlevel.env_cube = '"..self.env_cube..
"'\nlevel.spawn_pos = vector3("..self.spawn_pos.x..", "..self.spawn_pos.y..", "..self.spawn_pos.z..")"..
"\n\nlevel.map = [["
)
	
	for i = 1, #self.objects do
		-- to save deactivated objects too
		self.objects[i]:activate()
		
		-- reset class name for objects using LOD
		local class_name = self.objects[i].className:gsub("_LOD", "", 1)
		
		file:write("\n")
		-- objects with collision
		if self.objects[i].instance.body ~= nil then
			file:write("object \""..class_name.."\" ("..self.objects[i].instance.body.worldPosition..") {".."rot="..self.objects[i].instance.body.worldOrientation..", name=\""..self.objects[i].name.."\" }")
		-- objects without collision
		elseif self.objects[i].instance.gfx ~= nil then
			file:write("object \""..class_name.."\" ("..self.objects[i].instance.gfx.localPosition..") {".."rot="..self.objects[i].instance.gfx.localOrientation..", name=\""..self.objects[i].name.."\" }")
		-- sounds
		else
			file:write("object \""..class_name.."\" ("..self.objects[i].pos..") {".."orientation="..self.objects[i].orientation..", name=\""..self.objects[i].name.."\" }")
		end
	end
	
	file:write("\n]]\n\n")
	file:write([[
if in_editor == true then
	-------------------- Editor level definitions: --------------------]])
	file:write("\n	level.cam_pos = vector3("..player_ctrl.camPos.x..", "..player_ctrl.camPos.y..", "..player_ctrl.camPos.z..")")
	file:write("\n	level.cam_dir = quat("..player_ctrl.camDir.w..", "..player_ctrl.camDir.x..", "..player_ctrl.camDir.y..", "..player_ctrl.camDir.z..")")
	file:write("\n	level.cam_Pitch = "..player_ctrl.camPitch)
	file:write("\n	level.cam_Yaw = "..player_ctrl.camYaw.."\n\n")
	
	file:write([[
	level.graphs = {
	-- Variables
	-- TODO
	-- nodes
	-- TODO
	}
else
	-------------------- in-game events --------------------
	level_events = {}
	level_variables = {}
	-- TODO
	
	-------------------- in-game level initialization --------------------
	safe_include('/data/'..']])
	
	file:write(self.game_mode..".lua')\n")
	
	file:write([[
	if game.game_load_level ~= nil and game.play ~= nil then
		game:game_load_level()
		game:play()
	else
		print(RED..'No gameplay defined!')
	end
end
]])
	file:close()
end