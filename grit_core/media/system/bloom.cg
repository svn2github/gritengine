// (c) David Cunningham 2012, Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#include <system/uber.cgh>

// only consider brightest colours for blur
float3 filter_for_blur(float3 colour, float threshold)
{
    float3 t = colour - threshold;
    //return max(float3(0.0,0.0,0.0), t);
    float dist = clamp((t.r + t.g + t.b)/3.0 + 1, 0.0, 1.0);
    //dist = dist == 1 ? 1 : 0;
    return dist * colour;
}

// pascals triangle: http://www.rastergrid.com/blog/wp-content/uploads/2010/09/binomial_coeff2.png


const float pascal_row01[] = { 1 };
const float pascal_row03[] = { 2, 1 };
const float pascal_row05[] = { 6, 4, 1 };
const float pascal_row07[] = { 20, 15, 6, 1 };
const float pascal_row09[] = { 70, 56, 28, 8, 1 };
const float pascal_row11[] = { 252, 210, 120, 45, 10, 1 };
const float pascal_row13[] = { 924, 792, 495, 220, 66, 12, 1 };
const float pascal_row15[] = { 3432, 3003, 2002, 1001, 364, 91, 14, 1, };
const float pascal_row17[] = { 12870, 11440, 8008, 4368, 1820, 560, 120, 16, 1 };
#define PASCAL_ROW pascal_row11
const int rad=4;

#if BLOOM_HORZ==1
void fp_main (
    in float2 uv : TEXCOORD0,
    sampler2D src_tex : register(s0),
    uniform float4 viewport_size,
    uniform float bloom_threshold,
    uniform float bloom_tex_scale,
    out float3 pixel : COLOR
) {
    pixel = float3(0,0,0);

    float off = viewport_size.z*bloom_tex_scale;

    float total = 0;

    // filter image down to > 1 areas, then blur them
    for (int i=-rad ; i<=rad ; ++i) {
        float2 bloom_uv = uv*bloom_tex_scale + off*float2(i, 0);
        bloom_uv = clamp(bloom_uv, float2(off, off)*bloom_tex_scale, float2(1-off, 1-off)*bloom_tex_scale);
        float3 texel = tex2D(src_tex, bloom_uv).rgb;
        #if BLOOM_FILTER == 1
        // first iteration takes unfiltered unscaled hdr fb as input
        texel = filter_for_blur(texel, bloom_threshold);
        #endif
        float weight = PASCAL_ROW[i<0?-i:i];
        pixel += weight * texel;
        total += weight;
    }

    pixel /= total;
} 
#else
void fp_main (
    in float2 uv : TEXCOORD0,
    sampler2D half_bloom : register(s0),
    sampler2D original : register(s1),
    sampler3D lut : register(s2),
    uniform float4 viewport_size,
    uniform float bloom_tex_scale,
    uniform float3 global_exposure,
    uniform float global_saturation,
    out float3 pixel : COLOR
) {
    float off = viewport_size.w*bloom_tex_scale;

    float3 bloom_pixel = float3(0,0,0);
    float total = 0;
    for (int i=-rad ; i<=rad ; ++i) {
        float weight = PASCAL_ROW[i<0?-i:i];
        float2 bloom_uv = uv*bloom_tex_scale + off*float2(0, i);
        bloom_uv = clamp(bloom_uv, float2(off, off)*bloom_tex_scale, float2(1-off, 1-off)*bloom_tex_scale);
        bloom_pixel += weight * tex2D(half_bloom, bloom_uv).rgb;
        total += weight; 
    }

    bloom_pixel /= total;

    #if BLOOM_COMBINE_TONEMAP == 1
    float3 orig_pixel = tex2D(original, uv).rgb;
    pixel = tone_map(lut, global_saturation, global_exposure * (orig_pixel+bloom_pixel));
    #else
    pixel = bloom_pixel;
    #endif

} 
#endif

