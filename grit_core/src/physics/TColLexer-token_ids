// -*- C++ -*- vim: set syntax=cpp:
// PURPOSE: File containing definition of token-identifier and
//          a function that maps token identifiers to a string
//          name.
//
// NOTE: This file has been created automatically by a
//       quex program.
//
// DATE: Thu Nov  7 02:05:52 2013
//
/////////////////////////////////////////////////////////////////////////////////////////
#ifndef __INCLUDE_GUARD__QUEX__TOKEN_IDS__AUTO_2013y11m7d_2h05m52s__
#define __INCLUDE_GUARD__QUEX__TOKEN_IDS__AUTO_2013y11m7d_2h05m52s__

#include<cstdio> // for: 'std::sprintf'
#include<map>    // for: 'token-id' <-> 'name map'

/* Definition of essential token identifiers that the analyser engine requires. */
#if defined(__QUEX_TOKEN_ID_TERMINATION) || defined(__QUEX_TOKEN_ID_UNINITIALIZED)
#    error "Token identifiers for 'termination' and/or 'unilitialized' have been defined previously. This indicates that the inclusion sequence is incorrect. For example the file 'quex/code_base/descriptions' shall **not** be included before this file."
#endif
/* Note, we can very well refer in macros to things that are defined below. */
#define __QUEX_TOKEN_ID_TERMINATION    (QUEX_TKN_TERMINATION)
#define __QUEX_TOKEN_ID_UNINITIALIZED  (QUEX_TKN_UNINITIALIZED)

/* The token class definition file can only be included after the two token identifiers have
 * been defined. Otherwise, it would rely on default values. */
#include "quex/code_base/Token"

#define QUEX_TKN_ANGULAR_DAMPING          ((QUEX_TOKEN_ID_TYPE)10000)
#define QUEX_TKN_ANGULAR_SLEEP_THRESHOLD  ((QUEX_TOKEN_ID_TYPE)10001)
#define QUEX_TKN_ATTRIBUTES               ((QUEX_TOKEN_ID_TYPE)10002)
#define QUEX_TKN_BOX                      ((QUEX_TOKEN_ID_TYPE)10003)
#define QUEX_TKN_CAPSULE                  ((QUEX_TOKEN_ID_TYPE)10004)
#define QUEX_TKN_CCD_MOTION_THRESHOLD     ((QUEX_TOKEN_ID_TYPE)10005)
#define QUEX_TKN_CCD_SWEPT_SPHERE_RADIUS  ((QUEX_TOKEN_ID_TYPE)10006)
#define QUEX_TKN_CENTRE                   ((QUEX_TOKEN_ID_TYPE)10007)
#define QUEX_TKN_COMPOUND                 ((QUEX_TOKEN_ID_TYPE)10008)
#define QUEX_TKN_CONE                     ((QUEX_TOKEN_ID_TYPE)10009)
#define QUEX_TKN_CYLINDER                 ((QUEX_TOKEN_ID_TYPE)10010)
#define QUEX_TKN_DIMENSIONS               ((QUEX_TOKEN_ID_TYPE)10011)
#define QUEX_TKN_DISTANCE                 ((QUEX_TOKEN_ID_TYPE)10012)
#define QUEX_TKN_EDGE_DISTANCE_THRESHOLD  ((QUEX_TOKEN_ID_TYPE)10013)
#define QUEX_TKN_FACES                    ((QUEX_TOKEN_ID_TYPE)10014)
#define QUEX_TKN_FLOAT                    ((QUEX_TOKEN_ID_TYPE)10015)
#define QUEX_TKN_FRICTION                 ((QUEX_TOKEN_ID_TYPE)10016)
#define QUEX_TKN_HEIGHT                   ((QUEX_TOKEN_ID_TYPE)10017)
#define QUEX_TKN_HEX                      ((QUEX_TOKEN_ID_TYPE)10018)
#define QUEX_TKN_HULL                     ((QUEX_TOKEN_ID_TYPE)10019)
#define QUEX_TKN_INERTIA                  ((QUEX_TOKEN_ID_TYPE)10020)
#define QUEX_TKN_LBRACE                   ((QUEX_TOKEN_ID_TYPE)10021)
#define QUEX_TKN_LINEAR_DAMPING           ((QUEX_TOKEN_ID_TYPE)10022)
#define QUEX_TKN_LINEAR_SLEEP_THRESHOLD   ((QUEX_TOKEN_ID_TYPE)10023)
#define QUEX_TKN_MARGIN                   ((QUEX_TOKEN_ID_TYPE)10024)
#define QUEX_TKN_MASS                     ((QUEX_TOKEN_ID_TYPE)10025)
#define QUEX_TKN_MATERIAL                 ((QUEX_TOKEN_ID_TYPE)10026)
#define QUEX_TKN_MAX_EDGE_ANGLE_THRESHOLD ((QUEX_TOKEN_ID_TYPE)10027)
#define QUEX_TKN_MULTISPHERE              ((QUEX_TOKEN_ID_TYPE)10028)
#define QUEX_TKN_NATURAL                  ((QUEX_TOKEN_ID_TYPE)10029)
#define QUEX_TKN_NORMAL                   ((QUEX_TOKEN_ID_TYPE)10030)
#define QUEX_TKN_ORIENTATION              ((QUEX_TOKEN_ID_TYPE)10031)
#define QUEX_TKN_PLANE                    ((QUEX_TOKEN_ID_TYPE)10032)
#define QUEX_TKN_RADIUS                   ((QUEX_TOKEN_ID_TYPE)10033)
#define QUEX_TKN_RBRACE                   ((QUEX_TOKEN_ID_TYPE)10034)
#define QUEX_TKN_RESTITUTION              ((QUEX_TOKEN_ID_TYPE)10035)
#define QUEX_TKN_SEMI                     ((QUEX_TOKEN_ID_TYPE)10036)
#define QUEX_TKN_SHRINK                   ((QUEX_TOKEN_ID_TYPE)10037)
#define QUEX_TKN_SPHERE                   ((QUEX_TOKEN_ID_TYPE)10038)
#define QUEX_TKN_STATIC                   ((QUEX_TOKEN_ID_TYPE)10039)
#define QUEX_TKN_STRING                   ((QUEX_TOKEN_ID_TYPE)10040)
#define QUEX_TKN_TCOL                     ((QUEX_TOKEN_ID_TYPE)10041)
#define QUEX_TKN_TERMINATION              ((QUEX_TOKEN_ID_TYPE)0)
#define QUEX_TKN_TRIMESH                  ((QUEX_TOKEN_ID_TYPE)10042)
#define QUEX_TKN_UNINITIALIZED            ((QUEX_TOKEN_ID_TYPE)1)
#define QUEX_TKN_UNKNOWN                  ((QUEX_TOKEN_ID_TYPE)10043)
#define QUEX_TKN_VERTEXES                 ((QUEX_TOKEN_ID_TYPE)10044)


namespace quex {


    inline const std::string&
    Token::map_id_to_name(const QUEX_TOKEN_ID_TYPE TokenID)
    {
       static bool virginity_f = true;
       static std::map<QUEX_TOKEN_ID_TYPE, std::string>  db;
       static std::string  error_string("");
       static std::string  uninitialized_string("<UNINITIALIZED>");
       static std::string  termination_string("<TERMINATION>");
       
       // NOTE: In general no assumptions can be made that the QUEX_TOKEN_ID_TYPE
       //       is an integer. Thus, no switch statement is used. 
       if( virginity_f ) {
           virginity_f = false;
           // Create the Database mapping TokenID -> TokenName
           
           db[QUEX_TKN_BOX]                      = std::string("BOX");
           db[QUEX_TKN_CYLINDER]                 = std::string("CYLINDER");
           db[QUEX_TKN_NORMAL]                   = std::string("NORMAL");
           db[QUEX_TKN_HULL]                     = std::string("HULL");
           db[QUEX_TKN_VERTEXES]                 = std::string("VERTEXES");
           db[QUEX_TKN_MATERIAL]                 = std::string("MATERIAL");
           db[QUEX_TKN_FRICTION]                 = std::string("FRICTION");
           db[QUEX_TKN_ANGULAR_DAMPING]          = std::string("ANGULAR_DAMPING");
           db[QUEX_TKN_MULTISPHERE]              = std::string("MULTISPHERE");
           db[QUEX_TKN_STATIC]                   = std::string("STATIC");
           db[QUEX_TKN_CONE]                     = std::string("CONE");
           db[QUEX_TKN_CCD_SWEPT_SPHERE_RADIUS]  = std::string("CCD_SWEPT_SPHERE_RADIUS");
           db[QUEX_TKN_MAX_EDGE_ANGLE_THRESHOLD] = std::string("MAX_EDGE_ANGLE_THRESHOLD");
           db[QUEX_TKN_RBRACE]                   = std::string("RBRACE");
           db[QUEX_TKN_ORIENTATION]              = std::string("ORIENTATION");
           db[QUEX_TKN_SEMI]                     = std::string("SEMI");
           db[QUEX_TKN_CCD_MOTION_THRESHOLD]     = std::string("CCD_MOTION_THRESHOLD");
           db[QUEX_TKN_MASS]                     = std::string("MASS");
           db[QUEX_TKN_UNKNOWN]                  = std::string("UNKNOWN");
           db[QUEX_TKN_EDGE_DISTANCE_THRESHOLD]  = std::string("EDGE_DISTANCE_THRESHOLD");
           db[QUEX_TKN_STRING]                   = std::string("STRING");
           db[QUEX_TKN_INERTIA]                  = std::string("INERTIA");
           db[QUEX_TKN_RESTITUTION]              = std::string("RESTITUTION");
           db[QUEX_TKN_NATURAL]                  = std::string("NATURAL");
           db[QUEX_TKN_LINEAR_SLEEP_THRESHOLD]   = std::string("LINEAR_SLEEP_THRESHOLD");
           db[QUEX_TKN_CENTRE]                   = std::string("CENTRE");
           db[QUEX_TKN_HEX]                      = std::string("HEX");
           db[QUEX_TKN_COMPOUND]                 = std::string("COMPOUND");
           db[QUEX_TKN_HEIGHT]                   = std::string("HEIGHT");
           db[QUEX_TKN_SPHERE]                   = std::string("SPHERE");
           db[QUEX_TKN_RADIUS]                   = std::string("RADIUS");
           db[QUEX_TKN_FACES]                    = std::string("FACES");
           db[QUEX_TKN_TRIMESH]                  = std::string("TRIMESH");
           db[QUEX_TKN_TERMINATION]              = std::string("TERMINATION");
           db[QUEX_TKN_TCOL]                     = std::string("TCOL");
           db[QUEX_TKN_DIMENSIONS]               = std::string("DIMENSIONS");
           db[QUEX_TKN_UNINITIALIZED]            = std::string("UNINITIALIZED");
           db[QUEX_TKN_DISTANCE]                 = std::string("DISTANCE");
           db[QUEX_TKN_LBRACE]                   = std::string("LBRACE");
           db[QUEX_TKN_ANGULAR_SLEEP_THRESHOLD]  = std::string("ANGULAR_SLEEP_THRESHOLD");
           db[QUEX_TKN_FLOAT]                    = std::string("FLOAT");
           db[QUEX_TKN_LINEAR_DAMPING]           = std::string("LINEAR_DAMPING");
           db[QUEX_TKN_CAPSULE]                  = std::string("CAPSULE");
           db[QUEX_TKN_PLANE]                    = std::string("PLANE");
           db[QUEX_TKN_ATTRIBUTES]               = std::string("ATTRIBUTES");
           db[QUEX_TKN_MARGIN]                   = std::string("MARGIN");
           db[QUEX_TKN_SHRINK]                   = std::string("SHRINK");
       }

       if     ( TokenID == __QUEX_TOKEN_ID_TERMINATION ) return termination_string;
       else if( TokenID == __QUEX_TOKEN_ID_UNINITIALIZED ) return uninitialized_string;
       std::map<QUEX_TOKEN_ID_TYPE, std::string>::const_iterator it = db.find(TokenID);
       if( it != db.end() ) return (*it).second;
       else {
          char tmp[64];
          std::sprintf(tmp, "<UNKNOWN TOKEN-ID: %i>", int(TokenID));
          error_string = std::string(tmp);
          return error_string;
       }
    }


}
#endif // __INCLUDE_GUARD__QUEX__TOKEN_IDS__AUTO_GENERATED__
